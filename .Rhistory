"Flag",
"Geartype",
"Vessel hours",
"Fishing hours",
"MMSI present"
)
column_list_fe10_ui <- c(
"Date",
"Latitude",
"Longitude",
"MMSI",
"Fishing hours"
)
tables_columns_list_ui <- list(
column_list_fe100_ui,
column_list_fe10_ui
)
geartype_elements <- c(
"drifting_longlines",
"fixed_gear",
"purse_seines",
"squid_jigger",
"trawlers",
"other_fishing"
)
geartype_names <- c(
"Drifting longlines",
"Fixed gear",
"Purse seines",
"Squid jigger",
"Trawlers",
"Other fishing gear"
)
names(geartype_elements) <- geartype_names
ui <- fluidPage(
useShinyjs(),
selectInput(
inputId = "table_name_ui",
label = "Query table",
choices = tables_list_ui[1:2]
),
checkboxGroupInput(
inputId = "filter_columns_ui",
label = "Filter by",
choices = NULL
),
disabled(
dateRangeInput(
inputId = "date",
label = "Date range",
start = "2012-01-01",
end = "2012-01-02",
min = "2012-01-01",
max = "2017-01-01",
separator = " to ",
autoclose = FALSE
)),
disabled(
numericRangeInput(
inputId = "lat_bin",
label = "Latitude range:",
value = c(-90, 90)
)),
disabled(
numericRangeInput(
inputId = "lon_bin",
label = "Longitude range:",
value = c(-180, 180)
)),
disabled(
numericRangeInput(
inputId = "vessel_hours",
label = "Vessel hours range:",
value = c(0, 2000)
)),
disabled(
numericRangeInput(
inputId = "fishing_hours",
label = "Fishing hours range:",
value = c(0, 200)
)),
disabled(
numericRangeInput(
inputId = "mmsi_present",
label = "MMSI present range:",
value = c(0, 600)
)),
disabled(
numericRangeInput(
inputId = "mmsi",
label = "MMSI range:",
value = c(0, 1111111111)
)),
disabled(
selectInput(
inputId = "flag",
label = "Flag",
choices = na.omit(codelist$iso3c),
multiple = TRUE
)),
disabled(
selectInput(
inputId = "geartype",
label = "Geartype",
choices = geartype_elements,
multiple = TRUE
)),
actionButton(
inputId = "filter_button",
label = "Filter"
),
dataTableOutput(
outputId = "queried_table"
)
)
server <- function(input,output,session) {
observeEvent(input$table_name_ui,{
table_name_ui <- input$table_name_ui
fields_list <- dbListFields(
BQ_connection,
tables_list[match(
table_name_ui,
tables_list_ui
)])
fields_list_names <- tables_columns_list_ui[[match(
table_name_ui,
tables_list_ui
)]]
names(fields_list) <- fields_list_names
updateCheckboxGroupInput(
session,
inputId = 'filter_columns_ui',
choices = fields_list
)})
observeEvent(input$filter_columns_ui,{
for (field in list_togglable_ids) {
if (field %in% input$filter_columns_ui) {
enable(id = field)
} else {
disable (id = field)
}
}
},ignoreNULL = FALSE)
observeEvent(input$filter_button, {
table_name_ui <- input$table_name_ui
table_full_name <- paste(
project,
dataset,
tables_list[match(
table_name_ui,
tables_list_ui)],
sep = ".")
SQL <- "SELECT * FROM {`table_full_name`}"
if ("date" %in% input$filter_columns_ui){
date_SQL <- "AND _PARTITIONTIME >= {input$date[1]} AND _PARTITIONTIME < {input$date[2]}"
SQL <- paste(
SQL,
date_SQL,
sep = " "
)
}
for (field in input$filter_columns_ui){
if (field == "date" || field == "flag" || field == "geartype"){
next } else {
next_SQL <- sprintf(
"AND %s >= {input$%s[1]} AND %s < {input$%s[2]}",
field,
field,
field,
field
)
SQL <- paste(
SQL,
next_SQL,
sep = " "
)}
}
if (isTruthy(input$flag)){
flag_SQL <- "AND ("
for (isocode in input$flag) {
next_flag_SQL <- sprintf(
"flag = '%s' OR",
isocode
)
flag_SQL <- paste(
flag_SQL,
next_flag_SQL,
sep = " "
)
}
flag_SQL <- stri_replace_last_fixed(
flag_SQL,
' OR',
')'
)
SQL <- paste(
SQL,
flag_SQL,
sep = " "
)
}
if ("geartype" %in% input$filter_columns_ui && isTruthy(input$geartype)){
geartype_SQL <- "AND ("
for (gear in input$geartype) {
next_geartype_SQL <- sprintf(
"geartype = '%s' OR",
gear
)
geartype_SQL <- paste(
geartype_SQL,
next_geartype_SQL,
sep = " "
)
}
geartype_SQL <- stri_replace_last_fixed(
geartype_SQL,
' OR',
')'
)
SQL <- paste(
SQL,
geartype_SQL,
sep = " "
)
}
SQL <- sub(
"AND",
"WHERE",
SQL
)
GLUED_SQL <- glue_sql(
SQL,
.con = BQ_connection
)
retrieved_data <- dbGetQuery(
BQ_connection,
GLUED_SQL
)
output$queried_table <- renderDataTable(retrieved_data)
})
}
shinyApp(ui = ui, server = server)
project <- "global-fishing-watch"
dataset <- "global_footprint_of_fisheries"
billing <- "fish-r-man" # your billing account name
BQ_connection <-  dbConnect(bigquery(),
project = project,
dataset = dataset,
billing = billing,
use_legacy_sql = FALSE) # specify we are using Standard SQL
tables_list <- dbListTables(BQ_connection)
list_togglable_ids <- list(
"date",
"lat_bin",
"lon_bin",
"vessel_hours",
"fishing_hours",
"mmsi_present",
"mmsi",
"flag",
"geartype"
)
tables_list_ui <- c(
"Fishing effort at 100th degree",
"Fishing effort at 10th degree"
)
column_list_fe100_ui <- c(
"Date",
"Latitude",
"Longitude",
"Flag",
"Geartype",
"Vessel hours",
"Fishing hours",
"MMSI present"
)
column_list_fe10_ui <- c(
"Date",
"Latitude",
"Longitude",
"MMSI",
"Fishing hours"
)
tables_columns_list_ui <- list(
column_list_fe100_ui,
column_list_fe10_ui
)
geartype_elements <- c(
"drifting_longlines",
"fixed_gear",
"purse_seines",
"squid_jigger",
"trawlers",
"other_fishing"
)
geartype_names <- c(
"Drifting longlines",
"Fixed gear",
"Purse seines",
"Squid jigger",
"Trawlers",
"Other fishing gear"
)
names(geartype_elements) <- geartype_names
ui <- fluidPage(
useShinyjs(),
selectInput(
inputId = "table_name_ui",
label = "Query table",
choices = tables_list_ui[1:2]
),
checkboxGroupInput(
inputId = "filter_columns_ui",
label = "Filter by",
choices = NULL
),
disabled(
dateRangeInput(
inputId = "date",
label = "Date range",
start = "2012-01-01",
end = "2012-01-02",
min = "2012-01-01",
max = "2017-01-01",
separator = " to ",
autoclose = FALSE
)),
disabled(
numericRangeInput(
inputId = "lat_bin",
label = "Latitude range:",
value = c(-90, 90)
)),
disabled(
numericRangeInput(
inputId = "lon_bin",
label = "Longitude range:",
value = c(-180, 180)
)),
disabled(
numericRangeInput(
inputId = "vessel_hours",
label = "Vessel hours range:",
value = c(0, 2000)
)),
disabled(
numericRangeInput(
inputId = "fishing_hours",
label = "Fishing hours range:",
value = c(0, 200)
)),
disabled(
numericRangeInput(
inputId = "mmsi_present",
label = "MMSI present range:",
value = c(0, 600)
)),
disabled(
numericRangeInput(
inputId = "mmsi",
label = "MMSI range:",
value = c(0, 1111111111)
)),
disabled(
selectInput(
inputId = "flag",
label = "Flag",
choices = na.omit(codelist$iso3c),
multiple = TRUE
)),
disabled(
selectInput(
inputId = "geartype",
label = "Geartype",
choices = geartype_elements,
multiple = TRUE
)),
actionButton(
inputId = "filter_button",
label = "Filter"
),
dataTableOutput(
outputId = "queried_table"
)
)
server <- function(input,output,session) {
observeEvent(input$table_name_ui,{
table_name_ui <- input$table_name_ui
fields_list <- dbListFields(
BQ_connection,
tables_list[match(
table_name_ui,
tables_list_ui
)])
fields_list_names <- tables_columns_list_ui[[match(
table_name_ui,
tables_list_ui
)]]
names(fields_list) <- fields_list_names
updateCheckboxGroupInput(
session,
inputId = 'filter_columns_ui',
choices = fields_list
)})
observeEvent(input$filter_columns_ui,{
for (field in list_togglable_ids) {
if (field %in% input$filter_columns_ui) {
enable(id = field)
} else {
disable (id = field)
}
}
},ignoreNULL = FALSE)
observeEvent(input$filter_button, {
table_name_ui <- input$table_name_ui
table_full_name <- paste(
project,
dataset,
tables_list[match(
table_name_ui,
tables_list_ui)],
sep = ".")
SQL <- "SELECT * FROM {`table_full_name`}"
if ("date" %in% input$filter_columns_ui){
date_SQL <- "AND _PARTITIONTIME >= {input$date[1]} AND _PARTITIONTIME < {input$date[2]}"
SQL <- paste(
SQL,
date_SQL,
sep = " "
)
}
for (field in input$filter_columns_ui){
if (field == "date" || field == "flag" || field == "geartype"){
next } else {
next_SQL <- sprintf(
"AND %s >= {input$%s[1]} AND %s < {input$%s[2]}",
field,
field,
field,
field
)
SQL <- paste(
SQL,
next_SQL,
sep = " "
)}
}
if (isTruthy(input$flag)){
flag_SQL <- "AND ("
for (isocode in input$flag) {
next_flag_SQL <- sprintf(
"flag = '%s' OR",
isocode
)
flag_SQL <- paste(
flag_SQL,
next_flag_SQL,
sep = " "
)
}
flag_SQL <- stri_replace_last_fixed(
flag_SQL,
' OR',
')'
)
SQL <- paste(
SQL,
flag_SQL,
sep = " "
)
}
if ("geartype" %in% input$filter_columns_ui && isTruthy(input$geartype)){
geartype_SQL <- "AND ("
for (gear in input$geartype) {
next_geartype_SQL <- sprintf(
"geartype = '%s' OR",
gear
)
geartype_SQL <- paste(
geartype_SQL,
next_geartype_SQL,
sep = " "
)
}
geartype_SQL <- stri_replace_last_fixed(
geartype_SQL,
' OR',
')'
)
SQL <- paste(
SQL,
geartype_SQL,
sep = " "
)
}
SQL <- sub(
"AND",
"WHERE",
SQL
)
GLUED_SQL <- glue_sql(
SQL,
.con = BQ_connection
)
retrieved_data <- dbGetQuery(
BQ_connection,
GLUED_SQL
)
output$queried_table <- renderDataTable(retrieved_data)
})
}
shinyApp(ui = ui, server = server)
